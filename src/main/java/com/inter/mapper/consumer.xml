<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.inter.consumer">

	<!-- Version Check -->
	<select id="getVersionCheckInfo" parameterType="map" resultType="hashmap">
		/* getVersionCheckInfo */
		SELECT MAX(a.current_version_code) as currentVersionCode, MAX(a.current_version_name) as currentVersionName, 
			(SELECT IFNULL(SUM(b.is_forced_update), 0)
	        FROM app_version b
	        WHERE b.os_type = #{osType}
	        AND b.current_version_code > #{currentVersionCode}
	       	) as isForceUpdate 
		FROM app_version a
		WHERE a.os_type = #{osType}
	</select>
	
	<select id="getEncrptedKey" resultType="string">
		/* getEncrptedKey */
		SELECT comm_cd_val_nm encryptedKey
		FROM licom_comm_cd_dtl
		WHERE comm_cd_id	= 'CRYPT_KEY'
		AND eff_end_dt		= '99991231'
	</select>
	
	<select id="getQrExclusiveUrlList" resultType="string">
		/* getQrExclusiveUrlList */
		SELECT comm_cd_val_nm 
		FROM licom_comm_cd_dtl 
		WHERE comm_cd_id = 'QR_EXCPT_URL_LST' 
		AND DATE_FORMAT(CURDATE(), '%Y%m%d') BETWEEN eff_sta_dt AND eff_end_dt
	</select>

	<!-- Detail Info -->
	<select id="getUserAuthByToken" parameterType="string" resultType="string">
		/* getUserAuthByToken */
		SELECT u.auth_cd
		FROM app_user u
		INNER JOIN app_user_token t
		ON u.app_user_id = t.app_user_id
		WHERE t.app_user_token = #{token}
	</select>
	
	<select id="getCurrentSeqInfo" parameterType="map" resultType="hashmap">
		/* getCurrentSeqInfo */
		SET @obj_key = 'ICS2018KORVERSEQ';
		SET @crypt_key = null;
		
		SELECT AES_DECRYPT(unhex(comm_cd_val_nm), @obj_key)
		INTO @crypt_key
		FROM licom_comm_cd_dtl
		WHERE comm_cd_id = 'CRYPT_KEY';
		
		SELECT seq.sequence SEQUENCE, seq.ORDER_SEQ, DATE_FORMAT(seq.PROD_MAKE_DT, '%Y/%m/%d') PROD_MAKE_DT, DATE_FORMAT(seq.PROD_OUT_DT, '%Y/%m/%d') PROD_OUT_DT, DATE_FORMAT(seq.PROD_EXP_DT, '%Y/%m/%d') PROD_EXP_DT
		, edi.DETECT_COUNT, DATE_FORMAT(edi.LAST_DETECT_TIME, '%Y-%m-%d %H:%i:%s') LAST_DETECT_TIME, CAST(AES_DECRYPT(unhex(edi.LAST_LOCATION), @crypt_key) AS CHAR) LAST_LOCATION
		, CASE WHEN (SELECT COUNT(*) FROM app_physical_distribution WHERE sequence = #{sequence}) > 0 THEN 'Y' ELSE 'N' END DISTRIBUTION_YN
		, DATEDIFF(seq.prod_exp_dt, CURDATE()) + 1 REMAIN_DT
		FROM app_seq seq
		LEFT JOIN app_extended_detail_info edi
		ON seq.sequence = edi.sequence
		WHERE seq.sequence = #{sequence}
	</select>
	
	<select id="getMainLanguage" parameterType="map" resultType="string">
		/* getMainLanguage */
		SELECT country_cd countryCode FROM lian_order_info WHERE ORDER_SEQ = #{orderSeq}
	</select>
	
	<select id="getDetailInfo" parameterType="map" resultType="hashmap">
		/* getDetailInfo */
		SELECT DETAIL_GRP_CD, DETAIL_TYP_CD, DETAIL_TITLE, DETAIL_VAL, ICON_NM, DSP_MV_YN, MAN_YN, USER_ICON_YN
		FROM app_detail_info adi
		WHERE order_seq = #{orderSeq}
		AND country_cd = #{countryCode}
		AND auth_cd >= #{auth}
		AND dsp_yn = 'Y'
		ORDER BY auth_cd DESC, sort_no ASC 
	</select>
	
	<select id="getReviewInfo" parameterType="map" resultType="hashmap">
		/* getReviewInfo */
		SELECT COUNT(*) REVIEW_CNT, FORMAT(AVG(review_score), 1) REVIEW_SCORE
		FROM app_prod_review
		WHERE order_seq = #{orderSeq}
	</select>
	
	<select id="getImgPathByGroupUUID" parameterType="string" resultType="string">
		/* getImgPathByGroupUUID */
		SELECT CONCAT('/', comm_cd_val_desc, SUBSTRING_INDEX(SUBSTRING_INDEX(fa.server_fullname, comm.comm_cd_val_nm, -1), fa.filename_map, 1), fa.server_filename) imgList
      	FROM   lian_fileattach fa,
         (SELECT comm_cd_val_nm, comm_cd_val_desc
			FROM   licom_comm_cd_dtl
			WHERE  comm_cd_id       = 'FTP_SERVER_DIR'
			AND    comm_cd_val_desc = 'detail') comm        
		    WHERE  fa.groupuuid = #{groupUUID}
	</select>
	
	<select id="getDetailContent" parameterType="map" resultType="hashmap">
		/* getDetailContent */
		SELECT detail_ctt1, detail_ctt2, detail_ctt3, detail_ctt4, detail_ctt5
		FROM app_seq 
		WHERE sequence = #{sequence}
	</select>

	<!-- Detail Info CN -->
	<select id="getCurrentSeqInfoCN" parameterType="map" resultType="hashmap">
		/* getCurrentSeqInfoCN */
		SELECT seq.ORDER_SEQ orderSeq, DATE_FORMAT(seq.PROD_MAKE_DT, '%Y/%m/%d') PROD_MAKE_DT, DATE_FORMAT(seq.PROD_OUT_DT, '%Y/%m/%d') PROD_OUT_DT, DATE_FORMAT(seq.PROD_EXP_DT, '%Y/%m/%d') PROD_EXP_DT
		, edi.DETECT_COUNT detectCount , DATE_FORMAT(edi.LAST_DETECT_TIME, '%Y-%m-%d %H:%i:%s') lastDetectTime, LAST_LOCATION lastAddress
		, (SELECT COUNT(*) FROM app_physical_distribution WHERE sequence = #{sequence}) logisticsCount
		, DATEDIFF(seq.prod_exp_dt, CURDATE()) + 1 REMAIN_DT
		FROM app_seq seq
		LEFT JOIN app_extended_detail_info edi
		ON seq.sequence = edi.sequence
		WHERE seq.sequence = #{sequence}
	</select>
	
	<select id="getIconColorInfo" parameterType="map" resultType="hashmap">
		/* getIconColorInfo */
		SELECT detail_typ_cd typeCode, detail_title title, detail_val value, icon_nm iconName
		FROM app_detail_info 
		WHERE country_cd = #{countryCode} 
		AND order_seq = #{orderSeq}
		AND dsp_yn = 'Y' 
		AND (icon_nm IN ('MATR', 'NUTR') OR detail_title = 'COLOR_VAL' OR detail_typ_cd = 'M02')
	</select>
	
	<select id="getDetailinfoCN" parameterType="map" resultType="hashmap">
		/* getDetailinfoCN */
		SELECT detail_title title, detail_val content 
		FROM app_detail_info
		WHERE country_cd = #{countryCode}
		AND order_seq = #{orderSeq}
		AND detail_grp_cd = 'DEF'
		AND detail_typ_cd IN ('N01', 'N02', 'N99')
		AND detail_val NOT IN ('DETECT_COUNT', 'LAST_LOCATION', 'LAST_DETECT_TIME')
		AND dsp_yn = 'Y'
		AND auth_cd >= #{authCd}
		ORDER BY sort_no
	</select>
	
	<!-- Physical Distribution List -->
	<select id="queryPhysicalDistributionInfo" parameterType="string" resultType="hashmap">
		/* queryPhysicalDistributionInfo */
		SELECT eu.name         AS enterpriseUserName
		     , e.name          AS enterpriseName
		     , t1.latitude     AS latitude
		     , t1.longitude    AS longitude
		     , t1.time         AS time
		     , t1.type         AS productDistributionType
		     , t1.full_address AS fullAddress
		     , t2.delivery_yn  AS deliveryYn
		     , t1.dv_id        AS deliveryId
		FROM   (SELECT latitude
		             , longitude
		             , time
		             , type
		             , full_address
		             , enterprise_user_key
		             , dv_id
		      FROM   app_physical_distribution
		      WHERE  sequence = #{sequence}
		       ) t1
		    , (SELECT COMM_CD_VAL                                as type_cd
		          , COMM_CD_VAL_NM                             as type_nm
		          , SUBSTRING_INDEX(COMM_CD_VAL_DESC, '/', 1)  as display_yn
		          , SUBSTRING_INDEX(COMM_CD_VAL_DESC, '/', -1) as delivery_yn
		      FROM   licom_comm_cd_dtl
		      WHERE  comm_cd_id = 'SEQ_ST_CD'
		      AND    country_cd = 'KR'
		      AND    eff_end_dt = '99991231'
		      ) t2
		    , app_enterprise_user eu
		     , app_enterprise      e
		WHERE  t1.type                = t2.type_cd
		AND    t2.display_yn          = 'Y'
		AND    eu.enterprise_user_key = t1.enterprise_user_key
		AND    eu.enterprise_key      = e.enterprise_key
		ORDER BY t1.time DESC
	</select>

	<!-- App Log -->
	<select id="getTokenByUserId" parameterType="string" resultType="string">
		/* getTokenByUserId */
		SELECT app_user_token FROM app_user_token WHERE app_user_id = #{appUserId}
	</select>
	
	<select id="getGenderBirthById" parameterType="string" resultType="hashmap">
		/* getGenderBirthById */
		SELECT gender, birth_dt birthDt FROM app_user WHERE app_user_id = #{appUserId}
	</select>
	
	<select id="getOrderInfo" parameterType="string" resultType="hashmap">
		/* getOrderInfo */
		SELECT seq.order_seq orderNum, loi.prod_typ_cd prodTypeCd
		FROM app_seq seq INNER JOIN lian_order_info loi ON seq.ORDER_SEQ = loi.ORDER_SEQ
		WHERE sequence = #{sequence}
	</select>

	<insert id="insertFailLog" parameterType="map">
		/* insertFailLog */
		INSERT INTO app_log_fail (
		   NO
		  , AT_DATE
		  , RGST_YMD
		  , RGST_YY
		  , RGST_MM
		  , RGST_DD
		  , MANUFACTURE
		  , DEVICE
		  , OS_TYPE
		  , OS_VERSION
		  , APP_USER_ID
		  , SEQUENCE
		  , LONGITUDE
		  , LATITUDE
		  , ADDR_ALL
		  , ADDR_PROVINCE
		  , ADDR_CITY
		  , ADDR_DISTRICT
		  , COUNTRY_CD
		  , FAIL_RESN_CD
		  , LOCATION_CD
		  , GENDER
		  , BIRTH_DT
		) VALUES (
		   NULL
		  , #{currentDatetime}
		  , #{ymd}
		  , #{year}
		  , #{month}
		  , #{day}
		  , #{manufacture}
		  , #{device}
		  , #{osType}
		  , #{osVersion}
		  , #{appUserId}
		  , #{sequence}
		  , #{longitude}
		  , #{latitude}
		  , #{fullAddress}
		  , #{province}
		  , #{city}
		  , #{district}
		  , #{countryCode}
		  , #{failReasonCode}
		  , #{locationCd}
		  , #{gender}
		  , #{birthDt}
		)
	</insert>
	
	<insert id="insertSuccessLog" parameterType="map">
		/* insertSuccessLog */
		INSERT INTO app_log_suc (
		   NO
		  , AT_DATE
		  , RGST_YMD
		  , RGST_YY
		  , RGST_MM
		  , RGST_DD
		  , MANUFACTURE
		  , DEVICE
		  , OS_TYPE
		  , OS_VERSION
		  , APP_USER_ID
		  , ORDER_SEQ
		  , SEQUENCE
		  , LONGITUDE
		  , LATITUDE
		  , ADDR_ALL
		  , ADDR_PROVINCE
		  , ADDR_CITY
		  , ADDR_DISTRICT
		  , COUNTRY_CD
		  , PROD_TYP_CD
		  , LOCATION_CD
		  , GENDER
		  , BIRTH_DT
		  , WECHAT_ID
		) VALUES (
		   NULL
		  , #{currentDatetime}
		  , #{ymd}
		  , #{year}
		  , #{month}
		  , #{day}
		  , #{manufacture}
		  , #{device}
		  , #{osType}
		  , #{osVersion}
		  , #{appUserId}
		  , #{orderNum}
		  , #{sequence}
		  , #{longitude}
		  , #{latitude}
		  , #{fullAddress}
		  , #{province}  
		  , #{city}
		  , #{district}
		  , #{countryCode}
		  , #{prodTypeCd}
		  , #{locationCd}
		  , #{gender}
		  , #{birthDt}
		  , #{wechatId}
		)
	</insert>
	
	<insert id="insertExtendedDetailInfo">
		/* insertExtendedDetailInfo */
		INSERT INTO app_extended_detail_info (sequence, detect_count , current_location , last_location, current_detect_time, last_detect_time) VALUES (#{sequence}, 1, #{fullAddress}, '', #{time}, null) ON DUPLICATE KEY UPDATE detect_count = detect_count +1, last_location = current_location, current_location = #{fullAddress}, last_detect_time = current_detect_time, current_detect_time = #{currentDatetime} 
	</insert>
	
	<select id="getRuleCheckCode" parameterType="map" resultType="string">
		/* getRuleCheckCode */
		SELECT RULE_SEQ(#{sequence}, #{appUserId}, #{latitude}, #{longitude})
	</select>
	
	<select id="getRuleCheckMsg" parameterType="map" resultType="string">
		/* getRuleCheckMsg */
		SELECT msg_ctt ruleCheckMsg
		FROM licom_msg
		WHERE country_cd = #{countryCode}
		AND msg_cl_cd = 'R' 
		AND DATE_FORMAT(audit_dtm, '%Y%m%d%H%i%s') BETWEEN eff_sta_dt AND eff_end_dt
		AND msg_id = #{ruleCheckCode}
	</select>
	
	<!-- ReWrite -->
	<select id="getOrderNumberBySequence" parameterType="long" resultType="int">
		/* getOrderNumberBySequence */
		SELECT order_seq FROM app_seq WHERE sequence = #{sequence}
	</select>
	
	<select id="queryHomepageAddr" parameterType="int" resultType="string">
		/* queryHomepageAddr */
		SELECT PROD_URL
		FROM lian_order_info loi
		WHERE loi.order_seq = #{orderNumber}
	</select>
	
	<!-- Get Result Message -->
	<select id="getResultMessage" parameterType="map" resultType="string">
		/* getResultMessage */
		SELECT msg_ctt FROM licom_msg WHERE msg_id = #{resultCode} AND country_cd = IFNULL(#{countryCode}, 'US')
	</select>
	
	<select id="getCommonCodeValue" parameterType="map" resultType="string">
		/* getCommonCodeValue */
		 SELECT COMM_CD_VAL_NM
		 FROM licom_comm_cd_dtl 
		 WHERE COMM_CD_VAL = #{codeValue}
		 AND COUNTRY_CD = IFNULL(#{countryCode}, 'US')
		 AND EFF_END_DT = '99991231'
	</select>

	<!-- Common Code -->
	<select id="getCommonCodeValueName" parameterType="map" resultType="string">
		/* getCommonCodeValueName */
		 SELECT COMM_CD_VAL_NM
		 FROM licom_comm_cd_dtl 
		 WHERE COMM_CD_ID = #{codeId}
		 AND COMM_CD_VAL = #{codeValue}
		 AND COUNTRY_CD = IFNULL(#{countryCode}, 'US')
		 AND EFF_END_DT = '99991231'
	</select>
	
	<!-- Login Id Repetion Check -->
	<select id="selectLoginIdCount" parameterType="map" resultType="int">
		/* selectLoginIdCount */
		SELECT COUNT(*) FROM app_user WHERE LOGIN_ID = #{loginId} AND LOGIN_TYP_CD = #{loginTypeCd}
	</select>
	
	<!-- Get Specified Sequence  -->
	<select id="getSpecifiedSequence" parameterType="string" resultType="int">
		/* getSpecifiedSequence */
		SELECT NEXTVAL(#{sequenceName});
	</select>
	
	<!-- Register Member, Modify User Agreements -->
	<insert id="insertAgreementInfo" parameterType="map">
		/* insertAgreementInfo */
		INSERT INTO
		app_user_agree_info_hst
		(
			agree_id
		  , app_user_id
		  , manage_yn
		  , personal_info_yn
		  , location_yn
		  , marketing_yn
		  , audit_dtm
		)
		VALUES
		(
			#{agreeId}
		  , #{appUserId}
		  , #{manageYn}
		  , #{personalInfoYn}
		  , #{locationYn}
		  , #{marketingYn}
		  , NOW()
		)
	</insert>
	
	<insert id="insertAppUserInfo" parameterType="map">
		/* insertAppUserInfo */
		INSERT INTO app_user
		(
			APP_USER_ID,
			COUNTRY_CD,
			LOGIN_ID,
			LOGIN_PW,
			SCRB_DT,
			AGREE_ID,
			AUDIT_DTM,
			AUTH_CD,
			LOGIN_TYP_CD,
			GENDER,
			BIRTH_DT
		)
		VALUES
		(
			#{appUserId},
			#{countryCode},
			#{loginId},
			#{loginPw},
			DATE_FORMAT(NOW(), '%Y%m%d'),
			#{agreeId},
			NOW(),
			'AU06',
			#{loginTypeCd},
			#{gender},
			#{birthDt}
		)
	</insert>
	
	<insert id="insertTokenInfo" parameterType="map">
		/* insertTokenInfo */
		INSERT INTO
		app_user_token
		(
			app_user_token
		  , app_user_id
		  , audit_dtm
		)
		VALUES
		(
			#{token}
		  , #{appUserId}
		  , NOW()
		)
	</insert>
	
	<!-- Member Login -->
	<select id="getUserIdByToken" parameterType="string" resultType="int">
		/* getUserIdByToken */
		SELECT app_user_id FROM app_user_token WHERE app_user_token = #{token}
	</select>
	
	<select id="checkUserExistence" parameterType="map" resultType="hashmap">
		/* checkUserExistence */
		SELECT LOGIN_ID loginId FROM app_user WHERE LOGIN_ID = #{loginId} AND LOGIN_TYP_CD = #{loginTypeCd}
	</select>
	
	<select id="getUserIdByIdPw" parameterType="map" resultType="int">
		/* getUserIdByIdPw */
		SELECT app_user_id FROM app_user WHERE login_id = #{loginId} AND login_pw = #{loginPw} AND LOGIN_TYP_CD = #{loginTypeCd}
	</select>
	
	<select id="getUserInfoById" parameterType="map" resultType="hashmap">
		/* getUserInfoById */
		SELECT a.app_user_id appUserId
		     , b.agree_id agreeId
		     , a.country_cd countryCode
		     , a.login_id loginId
		     , a.scrb_dt scrbDt
		     , a.gender gender
		     , a.birth_dt birthDt
		     , a.tmp_pw_yn tmpPwYn
		     , a.auth_cd authCd
		     , a.login_typ_cd loginTypeCd
		     , b.manage_yn manageYn
		     , b.personal_info_yn personalInfoYn
		     , b.location_yn locationYn
		     , b.marketing_yn marketingYn
		     , a.groupuuid groupUUID
		     , a.nick_nm nickName
		     , IFNULL((SELECT 'N'
                 FROM   app_terms d
                 WHERE  d.APP_CL_CD = '01'
                 AND    d.TRM_CL_CD = '02'
                 AND    DATE_FORMAT(b.audit_dtm, '%Y%m%d%H%i%s') BETWEEN d.eff_sta_dtm AND d.eff_end_dtm
                 AND    d.eff_end_dtm = '99991231235959'
                 AND    d.COUNTRY_CD = a.COUNTRY_CD
	           ), 'Y') manageChgYn
	         , IFNULL((SELECT 'N'
                 FROM   app_terms d
                 WHERE  d.APP_CL_CD = '01'
                 AND    d.TRM_CL_CD = '01'
                 AND    DATE_FORMAT(b.audit_dtm, '%Y%m%d%H%i%s') BETWEEN d.eff_sta_dtm AND d.eff_end_dtm
                 AND    d.eff_end_dtm = '99991231235959'
                 AND    d.COUNTRY_CD = a.COUNTRY_CD
	           ), 'Y') personalInfoChgYn
		FROM   app_user                a
		     , app_user_agree_info_hst b
		WHERE  a.app_user_id = #{appUserId}
		AND    b.agree_id    = a.agree_id
	</select>
	
	<delete id="deleteTokenByUserId" parameterType="int">
		/* deleteTokenByUserId */
		DELETE FROM app_user_token WHERE app_user_id = #{appUserId}
	</delete>
	
	<!-- Modify User Info, Report Failure, Register Member  -->
	<update id="updateUserDtlInfo" parameterType="map">
		/* updateUserInfo */
		UPDATE app_user
		SET    gender   = IF(LENGTH(#{gender})  > 0, #{gender} , gender)
		     , birth_dt = IF(LENGTH(#{birthDt}) > 0, #{birthDt}, birth_dt)
		     , nick_nm = IF(LENGTH(#{nickName}) = 0, NULL, #{nickName})
		     , audit_dtm = NOW()
		WHERE  app_user_id = #{appUserId}
	</update>
	
	<select id="getGroupUUID" resultType="string">
		/* getGroupUUID */
		SELECT CONCAT(CURDATE()+'','_f', NEXTVAL('fileGroup'))  AS groupUUID
	</select>
	
	<update id="updateUserImgId" parameterType="map">
		/* updateUserImgId */
		UPDATE app_user
		SET groupuuid = #{groupUUID}
			, audit_dtm = NOW()
		WHERE app_user_id = #{appUserId}
	</update>
	
	<insert id="insertImg" parameterType="map">
		/* insertImg */
		INSERT INTO lian_fileattach (groupuuid, fileuuid, audit_id, audit_dtm, server_filename, server_fullname, filesize, filename, full_filename, status, filename_map)
		VALUES
		<foreach collection="imgInfoList" item="imgInfo" separator=",">
			(
				#{imgInfo.groupUUID}, #{imgInfo.fileUUID}, 'APP USER', NOW(), #{imgInfo.fileName}, #{imgInfo.serverFullName}, #{imgInfo.fileSize}, #{imgInfo.fileName}, #{imgInfo.fileName}, 0, #{imgInfo.fileNameMap}
			)
		</foreach>
	</insert>
	
	<!-- Member Logout, Withdraw Member -->
	<delete id="deleteUserToken" parameterType="map">
		/* deleteUserToken */
		DELETE FROM app_user_token WHERE app_user_id = #{appUserId} AND app_user_token = #{token}
	</delete>
	
	<!-- Withdraw Member -->
	<select id="getUserIdByTokenAndPwd" parameterType="map" resultType="int">
		/* getUserIdByTokenAndPwd */
		SELECT au.app_user_id appUserId 
		FROM app_user au INNER JOIN app_user_token aut ON au.app_user_id = aut.app_user_id 
		WHERE aut.APP_USER_TOKEN = #{token} and au.LOGIN_PW = #{loginPw}
	</select>
	
	<delete id="delteUserInfo" parameterType="map">
		/* delteUserInfo */
		DELETE FROM app_user WHERE app_user_id = #{appUserId}
	</delete>
	
	<!-- Modify User Agreements -->
	<update id="updateUserAgreementRel" parameterType="map">
		/* updateUserAgreementRel */
		UPDATE app_user SET agree_id = #{agreeId}, audit_dtm = NOW() WHERE app_user_id = #{appUserId}
	</update>
	
	<!-- Report Failure -->
	<insert id="insertFailureReportInfo">
		/* insertFailureReportInfo */
		INSERT INTO app_fail_rpt_hst (
		   country_cd
		  , app_user_id
		  , rgst_dt
		  , rgst_tm
		  , audit_id
		  , audit_dtm
		  , fail_resn_cd
		  , img_id
		  , mnco_nm
		  , dev_nm
		  , os_typ_nm
		  , os_ver_nm
		  , lng_val
		  , lat_val
		  , addr_all
		  , addr_province
		  , addr_city
		  , addr_district
		  , prod_typ_cd
		  , sequence
		) VALUES (
		    #{countryCode}
		  , #{appUserId}
		  , #{rgstDt}
		  , #{rgstTm}
		  , #{appUserId}
		  , NOW()
		  ,
		  <if test="sequence == null">
		  'F01'
		  </if>
		  <if test="sequence != null">
		  'F03'
		  </if>
		  , #{imgId}
		  , #{manufacture}
		  , #{device}
		  , #{osType}
		  , #{osVersion}
		  , #{longitude}
		  , #{latitude}
		  , #{fullAddress}
		  , #{province}
		  , #{city}
		  , #{district}
		  , #{printKind}
		  , #{sequence}
		)
	</insert>
	
	<!-- Find Pwd -->
	<select id="getUserIdByLoginId" parameterType="map" resultType="int">
		/* getUserIdByLoginId */
		SELECT app_user_id FROM app_user WHERE login_id = #{loginId} AND LOGIN_TYP_CD = #{loginTypeCd}
	</select>
	
	<update id="updatePwd" parameterType="map">
		/* updatePwd */	
		UPDATE app_user SET login_pw = #{encryptedTempPwd}, tmp_pw_yn = 'Y', audit_dtm = NOW() WHERE app_user_id = #{appUserId}
	</update>
	
	<!-- Modify Pwd -->
	<select id="queryPwdCount" parameterType="map" resultType="int">
		/* queryPwdCount */
		SELECT COUNT(*) FROM app_user WHERE app_user_id = #{appUserId} AND login_pw = #{originalPwd}
	</select>
	
	<update id="update2NewPwd" parameterType="map">
		/* update2NewPwd */
		UPDATE app_user SET login_pw = #{newPwd}, tmp_pw_yn = 'N', audit_dtm = NOW() WHERE app_user_id = #{appUserId}
	</update>
	
	<!-- Recent Detection List, Register Question, Get Question List, Detail Info, Physical Distribution List, Token Check -->
	<select id="getUserCountByIdToken" parameterType="map" resultType="int">
		/* getUserCountByIdToken */
		SELECT COUNT(*) FROM app_user_token WHERE app_user_id = #{appUserId} AND app_user_token = #{token}
	</select>
	
	<select id="getSucDetectionList" parameterType="map" resultType="hashmap">
		/* getSucDetectionList */
		SELECT DATE_FORMAT(log.at_date, '%Y-%m-%d %H:%i:%s') detectTime
				, log.sequence
				, prodNm.detail_val prodNm
				, loi.prod_typ_cd prodTypeCd
				, prodCl.detail_val prodCl
				, (SELECT CONCAT('/', comm_cd_val_desc,
						SUBSTRING_INDEX(SUBSTRING_INDEX(fa.server_fullname, comm.comm_cd_val_nm, -1), fa.filename_map, 1),
						fa.server_filename)
			        FROM lian_fileattach fa
			        WHERE fa.groupuuid = loi.biz_logo_uuid) AS bizLogoPath
		<include refid="detectTable" />
		ORDER BY log.at_date DESC
	</select>
	
	<select id="getFailDetectionList" parameterType="map" resultType="hashmap">
		/* getFailDetectionList */
		SELECT date_format(a.AT_DATE, '%Y-%m-%d %H:%i:%s') detectTime
		FROM app_log_fail a
		WHERE a.APP_USER_ID = #{appUserId}
	      AND a.RGST_YMD BETWEEN date_format(date_add(#{currentDate}, INTERVAL -1 MONTH), '%Y%m%d') AND #{currentDate}
     	ORDER BY a.AT_DATE DESC
	</select>
	
	<!-- Sequence Info -->
	<select id="getSequenceInfoList" resultType="hashmap">
		/* getSequenceInfoList */
		SELECT seq_sta startSeq, seq_end endSeq, app_cd appCd FROM app_seq_range
	</select>
	
	<!-- Query Delivery Info -->
	<select id="selectDeliveryInfo" parameterType="map" resultType="hashmap">
		/* selectDeliveryInfo */
		SELECT DATE_FORMAT(adi.location_time, '%Y-%m-%d %H:%i:%s') locationTime,
		       adi.latitude      latitude, 
		       adi.longitude     longitude, 
		       aeu.NAME          enterpriseUserName, 
		       ae.NAME           enterpriseName 
		FROM   app_delivery_info adi, 
		       app_enterprise ae, 
		       app_enterprise_user aeu 
		WHERE  adi.enterprise_user_key = aeu.enterprise_user_key 
		       AND aeu.enterprise_key = ae.enterprise_key 
		       AND adi.dv_id = #{deliveryId} 
		ORDER  BY location_time DESC
	</select>
	
	<!-- Review -->
	<insert id="insertProdReview" parameterType="map">
		/* insertProdReview */
		INSERT INTO app_prod_review
		(id, order_seq, app_user_id, review_content, review_score, rgst_dt)
		VALUES
		(null, #{orderSeq}, #{appUserId}, TRIM(#{content}), #{score}, DATE_FORMAT(NOW(), '%Y%m%d'))
	</insert>
	
	<select id="getBizNameByOrderSeq" parameterType="map" resultType="string">
		/* getBizNameByOrderSeq */
		SELECT value 
		FROM lian_intl_biz_info libi 
		INNER JOIN lian_order_info loi ON libi.biz_id = loi.BIZ_ID 
		WHERE libi.country_cd = #{countryCode}
		AND title = 'BIZ_NAME' 
		AND loi.order_seq = #{orderSeq}
	</select>
	
	<select id="getProdNameByOrderSeq" parameterType="map" resultType="string">
		/* getProdNameByOrderSeq */
		SELECT detail_val prodName 
		FROM app_detail_info 
		WHERE order_seq = #{orderSeq} 
		AND country_cd = #{countryCode}
		AND detail_grp_cd = 'COM' 
		AND detail_typ_cd = 'M01'
	</select>
	
	<select id="getReviewList" parameterType="map" resultType="hashmap">
		/* getReviewList */
		SELECT au.groupuuid profileUrl, apr.id reviewId, apr.review_score score, IFNULL(au.nick_nm, CONCAT(LEFT(au.login_id, 4), '*****')) nickName, DATE_FORMAT(apr.rgst_dt, '%y.%m.%d') date, apr.review_content content, DATE_FORMAT(apr.audit_dtm, '%Y-%m-%d %H:%i:%s') time
		FROM app_prod_review apr 
		INNER JOIN app_user au
		ON apr.app_user_id = au.app_user_id
		WHERE order_seq = #{orderSeq}
		<if test='sortType.equals("N")'>
		    <if test='!time.equals("")'>
		        AND apr.audit_dtm &lt;= #{time}
		    </if>
		</if>
		ORDER BY 
		<if test='sortType.equals("S")'>
		    apr.review_score DESC,
		</if>
		apr.audit_dtm DESC
		LIMIT
		<if test='sortType.equals("S")'>
		    ${offset},
		</if>
		20
	</select>
	
	<select id="getReviewTotalPageByOrder" parameterType="map" resultType="int">
		/* getReviewTotalPageByOrder */
		SELECT CASE WHEN COUNT(*) != 0 THEN (COUNT(*) - 1) DIV 20 + 1 ELSE 0 END reviewTotalPageNo
		FROM app_prod_review
		WHERE order_seq = #{orderSeq}
	</select>
	
	<!-- Main Page Info -->
	<select id="getLatestNotice" parameterType="map" resultType="hashmap">
		/* getLatestNotice */
		SELECT ntc_title title, dtl.comm_cd_val_nm category, DATE_FORMAT(rgst_dt, '%Y-%m-%d') date 
		FROM app_ntc ntc
		INNER JOIN licom_comm_cd_dtl dtl on ntc.ntc_typ_cd = dtl.comm_cd_val
		WHERE ntc.country_cd = (CASE WHEN #{countryCode} = 'KR' THEN 'KR' ELSE 'US' END)
		AND dtl.country_cd = (CASE WHEN #{countryCode} = 'KR' THEN 'KR' ELSE 'US' END)
		AND ntc.ntc_grp_cd = '01'
		AND dtl.comm_cd_id = 'NTC_TYP_CD'
		AND DATE_FORMAT(CURDATE(), '%Y%m%d') BETWEEN dtl.eff_sta_dt AND dtl.eff_end_dt
		AND view_yn = 'Y'
		ORDER BY ntc.audit_dtm DESC
		LIMIT 1
	</select>
	
	<select id="getRandomCorpImgList" parameterType="map" resultType="hashmap">
		/* getRandomCorpImgList */
		SELECT (SELECT CONCAT('/', comm_cd_val_desc, SUBSTRING_INDEX(SUBSTRING_INDEX(fa.server_fullname, comm.comm_cd_val_nm, -1), fa.filename_map, 1), fa.server_filename)
				FROM lian_fileattach fa
		        WHERE fa.groupuuid = libi.value) AS corpImgUrl 
		FROM lian_intl_biz_info libi,
		lian_biz_info lbi,
			(SELECT comm_cd_val_nm, comm_cd_val_desc
		      FROM licom_comm_cd_dtl
		      WHERE     comm_cd_id = 'FTP_SERVER_DIR'
            	AND comm_cd_val_desc = 'detail') AS comm
		WHERE libi.biz_id = lbi.biz_id
		AND libi.title = 'LOGO_UUID'
		AND lbi.rel_ctrt_yn = 'Y'
		ORDER BY RAND()
		LIMIT 20
	</select>
	
	<select id="getReviewTotalPageNo" parameterType="map" resultType="int">
		/* getReviewTotalPageNo */
		SELECT (COUNT(*) DIV 20) + 1 reviewTotalPageNo
		<include refid="reviewTable" />
	</select>
	
	<select id="getProdImgListByReview" parameterType="map" resultType="hashmap">
		/* getProdImgListByReview */
		SELECT (SELECT CONCAT('/', comm_cd_val_desc, SUBSTRING_INDEX(SUBSTRING_INDEX(fa.server_fullname, comm.comm_cd_val_nm, -1), fa.filename_map, 1), fa.server_filename) 
		        FROM lian_fileattach fa
		        WHERE fa.groupuuid = loi.biz_logo_uuid)
		          AS prodImgUrl, orderSeq.order_seq orderSeq
		<include refid="reviewTable" />
		ORDER BY orderSeq.cnt DESC
		<choose>
			<when test="currentPageNo == null">
				LIMIT 20
			</when>
			<otherwise>
				LIMIT #{offset}, 20
			</otherwise>
		</choose>
	</select>
	
	<sql id="reviewTable">
		FROM (SELECT order_seq, COUNT(*) cnt FROM app_prod_review GROUP BY order_seq) orderSeq
		INNER JOIN lian_order_info loi
        ON orderSeq.order_seq = loi.order_seq
		, (SELECT comm_cd_val_nm, comm_cd_val_desc
		      FROM licom_comm_cd_dtl
		      WHERE     comm_cd_id = 'FTP_SERVER_DIR'
	            AND comm_cd_val_desc = 'detail') AS comm		
	</sql>
	
	<select id="getDetectCount" parameterType="map" resultType="int">
		/* getDetectCount */
		SELECT COUNT(*) cnt
		<include refid="detectTable" />
	</select>
	
	<select id="getProdImgListByDetectRecord" parameterType="map" resultType="hashmap">
		/* getProdImgListByDetectRecord */
		SELECT (SELECT CONCAT('/' ,comm_cd_val_desc, SUBSTRING_INDEX(SUBSTRING_INDEX(fa.server_fullname, comm.comm_cd_val_nm, -1), fa.filename_map, 1), fa.server_filename) FROM lian_fileattach fa WHERE fa.groupuuid = loi.biz_logo_uuid) AS prodImgUrl
			, log.sequence
			, DATE_FORMAT(log.at_date, '%Y-%m-%d %H:%i:%s') time
		<include refid="detectTable" />
		<if test="time != null and time != ''">
			AND log.AT_DATE &lt; #{time}
		</if>
		ORDER BY log.at_date DESC
		LIMIT 20
	</select>
	
	<sql id="detectTable">
		FROM app_log_suc log
		INNER JOIN (SELECT detail_val, order_seq FROM app_detail_info adi WHERE country_cd = #{countryCode} AND detail_typ_cd = 'M08') prodCl
		ON log.order_seq = prodCl.order_seq
		INNER JOIN (SELECT detail_val, order_seq FROM app_detail_info adi WHERE country_cd = #{countryCode} AND detail_typ_cd = 'M01') prodNm
		ON log.order_seq = prodNm.order_seq
		INNER JOIN lian_order_info loi
		ON loi.order_seq = log.order_seq
		, (SELECT comm_cd_val_nm, comm_cd_val_desc
				      FROM licom_comm_cd_dtl
				      WHERE     comm_cd_id = 'FTP_SERVER_DIR'
				            AND comm_cd_val_desc = 'detail') AS comm
		WHERE log.app_user_id = #{appUserId}
		AND log.rgst_ymd BETWEEN DATE_FORMAT(DATE_ADD(#{currentDate}, INTERVAL -1 MONTH), '%Y%m%d') AND #{currentDate}
	</sql>
	
	<select id="getNoticeTotalPage" parameterType="map" resultType="int">
		/* getNoticeTotalPage */
		SELECT CASE WHEN COUNT(*) != 0 THEN (COUNT(*) - 1) DIV 20 + 1 ELSE 0 END noticeTotalPageNo
		FROM app_ntc
		WHERE ntc_grp_cd = #{type}
	</select>
	
	<select id="getNoticeList" parameterType="map" resultType="hashmap">
		/* getNoticeList */
		SELECT ntc_title title, DATE_FORMAT(rgst_dt, '%Y-%m-%d') date, DATE_FORMAT(ntc.audit_dtm, '%Y-%m-%d %H:%i:%s') time, ntc_content content, uuid groupUUID
		<if test="type == '01'">
			, dtl.comm_cd_val_nm category
		</if>
		FROM app_ntc ntc
		<if test="type == '01'">
			INNER JOIN licom_comm_cd_dtl dtl on ntc.ntc_typ_cd = dtl.comm_cd_val
		</if>
		WHERE ntc.country_cd = (CASE WHEN #{countryCode} = 'KR' THEN 'KR' ELSE 'US' END)
		AND ntc.ntc_grp_cd = #{type}
		AND view_yn = 'Y'
		<if test="type == '01'">
			AND dtl.country_cd = (CASE WHEN #{countryCode} = 'KR' THEN 'KR' ELSE 'US' END)
			AND dtl.comm_cd_id = 'NTC_TYP_CD'
			AND DATE_FORMAT(CURDATE(), '%Y%m%d') BETWEEN dtl.eff_sta_dt AND dtl.eff_end_dt
		</if>
		ORDER BY ntc.audit_dtm DESC
		<choose>
			<when test="currentPageNo == null">
				LIMIT 20
			</when>
			<otherwise>
				LIMIT #{offset}, 20
			</otherwise>
		</choose>
	</select>
	
	<!-- Service Center -->
	<insert id="insertReportOrQuestion" parameterType="map">
		/* insertReportOrQuestion */
		INSERT INTO app_svc_cntr (cntr_typ_cd, app_user_id, country_cd, location_cd, req_content, uuid_arr)
		VALUES (#{type}, #{appUserId}, #{countryCode}
		, IFNULL(#{locationCd}, 'ZZ'),
		<choose>
			<when test="type == '01'">
				#{content}
			</when>
			<otherwise>
				CASE WHEN TRIM(#{content}) = '' THEN (SELECT msg_ctt from licom_msg WHERE msg_id = 'M01' AND country_cd = #{countryCode}) ELSE #{content} END 
			</otherwise>
		</choose>
		, #{groupUUID})
	</insert>
	
	<select id="getMyQuestionList" parameterType="map" resultType="hashmap">
		/* getMyQuestionList */
		SELECT id, req_content content, DATE_FORMAT(req_dtm, '%Y-%m-%d') date, DATE_FORMAT(req_dtm, '%Y-%m-%d %H:%i:%s') time, cntr_typ_cd type,
			 CASE WHEN res_content IS NOT NULL THEN 'Y' ELSE 'N' END answerYn
		FROM app_svc_cntr
		WHERE app_user_id = #{appUserId}
		AND view_yn = 'Y'
		<if test="time != ''">
			AND req_dtm &lt; #{time}
		</if>	
		ORDER by req_dtm DESC
		LIMIT 20
	</select>
	
	<select id="getAnswerById" parameterType="map" resultType="hashmap">
		/* getAnswerById */
		SELECT req_content quesContent, DATE_FORMAT(req_dtm, '%Y-%m-%d') quesDate, cntr_typ_cd type, 
			uuid_arr groupUUID, res_content ansContent, DATE_FORMAT(res_dtm, '%Y-%m-%d') ansDate
		FROM app_svc_cntr
		WHERE id = #{id}
	</select>
</mapper>